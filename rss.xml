<?xml version='1.0' encoding='utf-8'?>
<rss version='2.0'>
    <channel>
        <title>Mintsky's Blog</title>
        <link>http://mintsky.xyz/rss.xml</link>
        <description>Posts' Abstracts on Mintsky's Blog</description>
        <lastBuildDate>Fri, 10 Apr 2020 00:00:00 GMT</lastBuildDate>
        <language>zh-CN</language>
        <generator>https://github.com/saafo/homepage/blob/master/generator.py</generator>
        <copyright>Copyright 2020 Mintsky All Rights Reserved</copyright>

        <item>
            <title>人类的本质是造轮子</title>
            <link>http://blog.mintsky.xyz/20200410_new-home</link>
            <guid>http://blog.mintsky.xyz/20200410_new-home</guid>
            <pubDate>Fri, 10 Apr 2020 00:00:00 GMT</pubDate>
            <description>
                <![CDATA[<p>博客终于建好了。</p>
                <p>这里，我用了“建”，没有用“搭”。</p>
                <p>起因是，先前为了练手建了个主页，如果再用博客模板的话，就只有和原来的主页说再见了~~别啊~~</p>
                <p>于是脑子一时抽风，干脆自己写个框架吧。</p>
                <p>阅读更多...</p>
                ]]>
            </description>
        </item>
        <item>
            <title>用docker-compose部署postgresql和pgAdmin4</title>
            <link>http://blog.mintsky.xyz/20200307_docker-compose-postgres</link>
            <guid>http://blog.mintsky.xyz/20200307_docker-compose-postgres</guid>
            <pubDate>Sat, 07 Mar 2020 00:00:00 GMT</pubDate>
            <description>
                <![CDATA[<blockquote>
                <p>本来一直在用<code>docker</code>部署<code>postgresql</code>和<code>pgAdmin4</code>，但每次部署起来参数很多很麻烦，而且重启容器或者服务器都很麻烦，索性用<code>docker-compose</code>来部署。</p>
                </blockquote>
                <h2>准备步骤</h2>
                <p>安装<code>docker-compose</code></p>
                <p>```bash
                apt install docker-compose</p>
                <p>阅读更多...</p>
                ]]>
            </description>
        </item>
        <item>
            <title>Golang 在 VSCode 中的调试配置</title>
            <link>http://blog.mintsky.xyz/20200229_configure-go-in-vscode</link>
            <guid>http://blog.mintsky.xyz/20200229_configure-go-in-vscode</guid>
            <pubDate>Sat, 29 Feb 2020 00:00:00 GMT</pubDate>
            <description>
                <![CDATA[<p>（解决Golang在VSCode中调试时无法接收标准输入(stdin)的问题）</p>
                <blockquote>
                <p>最近开始接触Go语言，但在配置VSCode的调试文件的时候发现VSCode中的官方GO插件调试时用的是调试控制台(debug console)而非终端(terminal)，找了很多设置也没有类似于<code>terminal</code>或者<code>internalTerminal</code>或者<code>externalTerminal</code>的配置项。最终在<code>vscode-go</code>仓库的<a href="https://github.com/microsoft/vscode-go/issues/219">issue</a>里找到了问题所在。鉴于目前还没有国内的博客帖子总结该问题，在这里总结一下问题原因及解决方案。</p>
                </blockquote>
                <h3>问题起因</h3>
                <p>最开始以为是<code>vscode-go</code>插件的锅，但在相关问题的<a href="https://github.com/microsoft/vscode-go/issues/219">issue</a>里，<code>vscode-go</code>的开发团队给出的回复是，由于<code>delve</code>调试器本身在普通模式运行时就无法直接接受命令行标准输入(stdin)，导致配套的相关插件也无法正常工作。本来<code>delve</code>自身加上支持接受命令行输入的功能即可彻底解决这个问题，但似乎<code>delve</code>开发团队的人员<a href="https://github.com/go-delve/delve/issues/1274/#issuecomment-406981956">并不对此感兴趣</a>，不少开发者也同样也对此表示<a href="https://github.com/microsoft/vscode-go/issues/219/#issuecomment-455968894">无奈</a>,只有用目前其他开发者给出的<a href="https://github.com/microsoft/vscode-go/issues/219/#issuecomment-530933960">折中的解决办法</a>。</p>
                <p>阅读更多...</p>
                ]]>
            </description>
        </item>
        <item>
            <title>阿里云ECS初始化及常用操作</title>
            <link>http://blog.mintsky.xyz/20200218_ali-ecs</link>
            <guid>http://blog.mintsky.xyz/20200218_ali-ecs</guid>
            <pubDate>Tue, 18 Feb 2020 00:00:00 GMT</pubDate>
            <description>
                <![CDATA[<h2>初始化</h2>
                <ul>
                <li>重置实例密码</li>
                <li>控制台重启实例</li>
                <li>apt update &amp; upgrade</li>
                <li>apt install git</li>
                <li>apt install axel</li>
                <li>apt install python3-pip</li>
                </ul>
                <p>阅读更多...</p>
                ]]>
            </description>
        </item>

    </channel>
</rss>